"use strict";(self.webpackChunkzh=self.webpackChunkzh||[]).push([[671],{59485:(n,a,e)=>{e.r(a),e.d(a,{default:()=>le});var s=e(27875);const t=(0,s.uE)('<h1 id="公共-api" tabindex="-1"><a class="header-anchor" href="#公共-api" aria-hidden="true">#</a> 公共 API</h1><p>VueRequest 通常由 <a href="#return-values">Return Values</a>、<a href="#service">Service</a> 和 <a href="#options">Options</a> 三个部分组成</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>ReturnValues <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">FR</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> Options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TS 泛型说明</p><p><code>R</code> 是返回 <a href="#data"><code>data</code></a> 的泛型</p><p><code>P</code> 是 <a href="#params"><code>params</code></a> 的泛型 <em>（注：该泛型受到 <code>unknown[]</code> 的约束）</em></p><p><code>FR</code> 是 <a href="#formatresult"><code>formatresult</code></a> 返回的 <code>data</code> 的类型 <em>（注：后面文档提到的 <code>R</code> 泛型，在使用了 <code>formatresult</code> 后均要使用 <code>FR</code> 代替）</em></p></div><h2 id="return-values" tabindex="-1"><a class="header-anchor" href="#return-values" aria-hidden="true">#</a> Return Values</h2><h3 id="data" tabindex="-1"><a class="header-anchor" href="#data" aria-hidden="true">#</a> data</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;R | undefined&gt;</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p><p>接口返回的数据，如果有传入 <a href="#formatresult">formatResult</a>，则为格式化后的 <code>data</code></p></li></ul><h3 id="loading" tabindex="-1"><a class="header-anchor" href="#loading" aria-hidden="true">#</a> loading</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p><a href="#service"><strong>Service</strong></a> 请求的执行状态</p></li></ul>',9),o={id:"reloading",tabindex:"-1"},l=(0,s._)("a",{class:"header-anchor",href:"#reloading","aria-hidden":"true"},"#",-1),r=(0,s.Uk)(" reloading "),p=(0,s.uE)('<ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p>是否正在刷新，用于记录 <a href="#reload"><code>reload()</code></a> 是否正在触发。</p></li></ul><h3 id="params" tabindex="-1"><a class="header-anchor" href="#params" aria-hidden="true">#</a> params</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;P[]&gt;</code></p></li><li><p><strong>默认值：</strong> <code>[]</code></p><p><a href="#service"><strong>Service</strong></a> 的请求参数</p></li><li><p><strong>示例：</strong></p></li></ul><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;api/user?&#39;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> params<span class="token punctuation">,</span> run <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUser<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  defaultParams<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;John&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">// 默认请求时，如果存在 defaultParams， 则 params.value 将会等于 defaultParams，否则为空数组</span>\n\n<span class="token comment">// 当 run 传入参数时，此时的参数将会同步到 params 里面</span>\n<span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&#39;Benny&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// params.value 等于 [&#39;Benny&#39;]</span>\n</code></pre></div><h3 id="error" tabindex="-1"><a class="header-anchor" href="#error" aria-hidden="true">#</a> error</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;Error | undefined&gt;</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p><p>如果在内部抛出了一个错误，则会被 <code>error</code> 接收并返回</p></li></ul><h3 id="queries" tabindex="-1"><a class="header-anchor" href="#queries" aria-hidden="true">#</a> queries</h3>',7),c=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"Queries<R, P>")])],-1),i=(0,s._)("p",null,[(0,s._)("strong",null,"默认值："),(0,s.Uk)(),(0,s._)("code",null,"Object")],-1),u=(0,s._)("p",null,[(0,s.Uk)("默认情况下，新请求的数据将会覆盖旧请求的数据。当启用 "),(0,s._)("a",{href:"#querykey"},[(0,s._)("code",null,"queryKey()")]),(0,s.Uk)(" 后， "),(0,s._)("code",null,"queries"),(0,s.Uk)(" 能够同时存储多次请求的结果，实现并行的效果.")],-1),d={class:"custom-container tip"},h=(0,s._)("p",{class:"custom-container-title"},"注意",-1),g=(0,s._)("code",null,"queries",-1),k=(0,s.Uk)(" 是一个 "),f={href:"https://v3.cn.vuejs.org/api/basic-reactivity.html#reactive",target:"_blank",rel:"noopener noreferrer"},_=(0,s._)("code",null,"reactive",-1),m=(0,s.Uk)(" 对象"),v=(0,s.uE)('<p><code>Queries</code> 的类型如下</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Queries<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>\n  data<span class="token operator">:</span> <span class="token constant">R</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  error<span class="token operator">:</span> Error <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>\n  params<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">run</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token operator">...</span>params<span class="token operator">:</span> <span class="token constant">P</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">cancel</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">refresh</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">mutate</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token function-variable function">arg</span><span class="token operator">:</span> <span class="token punctuation">(</span>oldData<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span>newData<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',2),b=(0,s._)("strong",null,"参考：",-1),U=(0,s.Uk)("并发请求"),y=(0,s.uE)('<h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><ul><li><p><strong>类型：</strong> <code>(...params: P[]) =&gt; Promise&lt;R&gt;</code></p><p>手动触发 <a href="#service"><strong>Service</strong></a> 的请求</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>当开启了 <a href="#debounceinterval">debounceInterval</a> 或者 <a href="#throttleinterval">throttleInterval</a> 模式后 <code>run</code> 的返回结果有可能是 <code>Promise&lt;null&gt;</code></p></div></li></ul><h3 id="cancel" tabindex="-1"><a class="header-anchor" href="#cancel" aria-hidden="true">#</a> cancel</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p><ul><li>手动取消本次请求</li><li>停止<a href="#pollinginterval">轮询</a>功能</li></ul><div class="custom-container tip"><p class="custom-container-title">注意</p><p>这里说的取消<strong>并不是真正的停止请求</strong>，只是取消了对 <a href="#data">data</a> 的赋值以及 <a href="#loading">loading</a> 重置为 <code>false</code> 当前<strong>已发出</strong>的接口请求依旧会继续进行</p></div></li></ul><h3 id="refresh" tabindex="-1"><a class="header-anchor" href="#refresh" aria-hidden="true">#</a> refresh</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; Promise&lt;R&gt;</code></p><p>使用当前的 <a href="#params">params</a> 重新调用 <a href="#run">run</a></p></li></ul><h3 id="reload" tabindex="-1"><a class="header-anchor" href="#reload" aria-hidden="true">#</a> reload</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p><p>用于清空 <a href="#queries"><code>queries</code></a> 数据，以及所有请求状态（包括<a href="#data"><code>data</code></a>）。如果 <a href="#manual"><code>manual</code></a> 为 <code>false</code> 的情况下，还会使用 <a href="#defaultparams"><code>defaultParams</code></a> 重新触发 <a href="#run"><code>run()</code></a></p></li></ul><h3 id="mutate" tabindex="-1"><a class="header-anchor" href="#mutate" aria-hidden="true">#</a> mutate</h3>',9),E=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"(arg: (oldData: R) => R) => void | (newData: R) => void")]),(0,s._)("p",null,[(0,s.Uk)("直接修改 "),(0,s._)("a",{href:"#data"},"data"),(0,s.Uk)(" 的结果")])],-1),w=(0,s._)("strong",null,"参考：",-1),R=(0,s.Uk)("数据更改"),x=(0,s._)("h2",{id:"service",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#service","aria-hidden":"true"},"#"),(0,s.Uk)(" Service")],-1),B=(0,s.Uk)("用于发起获取资源的请求 ，可参考 "),P=(0,s.Uk)("数据请求"),W=(0,s.uE)('<h3 id="请求函数" tabindex="-1"><a class="header-anchor" href="#请求函数" aria-hidden="true">#</a> 请求函数</h3><ul><li><p><strong>类型：</strong></p><ul><li><code>(...params: P[]) =&gt; Promise&lt;R&gt;</code></li><li><code>| (...params: P[]) =&gt; string</code></li><li><code>| (...params: P[]) =&gt; ({ url: string; [key: string]: any; })</code></li></ul></li><li><p><strong>详情：</strong></p><p>可以通过传入一个返回值为 <code>Promise</code> 、<a href="#%E5%AD%97%E7%AC%A6%E4%B8%B2">字符串</a> 或者 <a href="#%E5%AF%B9%E8%B1%A1">对象</a> 的函数。这里我们更加推荐返回一个 <code>Promise</code>。你可以借助<strong>第三方的请求库</strong>（如 <code>axios</code> ）来帮你生成一个用于发起获取资源的请求 <code>Promise</code> 函数。</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> useRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-request&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">&#39;axios&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">getUser</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;api/user&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRequest</span><span class="token punctuation">(</span>getUser<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><h3 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h3>',3),A=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"string")])],-1),q=(0,s._)("p",null,[(0,s._)("strong",null,"详情：")],-1),D=(0,s.Uk)("如果你传入一个字符串，或者通过"),F=(0,s._)("a",{href:"#%E8%AF%B7%E6%B1%82%E5%87%BD%E6%95%B0"},"请求函数",-1),I=(0,s.Uk)("返回一个字符串的方式调用，那么我们将会使用全局下的 "),S={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer"},C=(0,s._)("code",null,"fetch()",-1),O=(0,s.Uk)(" 方法发起获取资源的请求，该字符串将会作为获取资源的 "),T=(0,s._)("strong",null,"URL",-1),j=(0,s._)("h3",{id:"对象",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#对象","aria-hidden":"true"},"#"),(0,s.Uk)(" 对象")],-1),z=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"{ url: string; [key: string]: any; }")])],-1),K=(0,s._)("p",null,[(0,s._)("strong",null,"详情：")],-1),L=(0,s.Uk)("如果你传入一个对象，或者通过"),V=(0,s._)("a",{href:"#%E8%AF%B7%E6%B1%82%E5%87%BD%E6%95%B0"},"请求函数",-1),N=(0,s.Uk)("返回一个对象的方式调用，那么我们将会使用全局下的 "),H={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch",target:"_blank",rel:"noopener noreferrer"},J=(0,s._)("code",null,"fetch()",-1),Q=(0,s.Uk)(" 方法发起获取资源的请求。该对象必须包含一个属性名为 "),M=(0,s._)("strong",null,"URL",-1),Y=(0,s.Uk)(" 的键值对，该值将会作为获取资源的 "),G=(0,s._)("strong",null,"URL",-1),X=(0,s._)("h2",{id:"options",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#options","aria-hidden":"true"},"#"),(0,s.Uk)(" Options")],-1),Z=(0,s._)("h3",{id:"loadingdelay",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#loadingdelay","aria-hidden":"true"},"#"),(0,s.Uk)(" loadingDelay")],-1),$=(0,s.uE)('<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p></li><li><p><strong>详情：</strong></p><p>通过设置延迟的毫秒数，可以延迟 <a href="#loading"><strong>loading</strong></a> 变成 <code>true</code> 的时间，有效防止闪烁。</p></li>',3),nn=(0,s._)("strong",null,"参考：",-1),an=(0,s.Uk)(),en=(0,s.Uk)("延迟加载状态"),sn=(0,s._)("h3",{id:"pollinginterval",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#pollinginterval","aria-hidden":"true"},"#"),(0,s.Uk)(" pollingInterval")],-1),tn=(0,s.uE)('<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p></li><li><p><strong>详情：</strong></p><p>通过设置轮询间隔毫秒值，可以进入轮询模式，定时触发请求。可以通过 <a href="#run"><code>run</code></a> / <a href="#cancel"><code>cancel</code></a> 来 <strong>开启</strong>/<strong>停止</strong> 轮询。在 <a href="#manual"><code>manual</code></a>设置为<code>true</code> 时，需要手动执行一次 <code>run</code> 后，才开始轮询。</p><ul><li>间隔值必须大于 <code>0</code> 才会生效</li></ul></li>',3),on=(0,s._)("strong",null,"参考：",-1),ln=(0,s.Uk)(),rn=(0,s.Uk)("轮询"),pn=(0,s._)("h3",{id:"pollingwhenhidden",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#pollingwhenhidden","aria-hidden":"true"},"#"),(0,s.Uk)(" pollingWhenHidden")],-1),cn=(0,s.uE)('<li><p><strong>类型：</strong> <code>boolean</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p></li><li><p><strong>详情：</strong></p><p>当 <a href="#pollingInterval"><code>pollingInterval</code></a> 大于 <code>0</code> 时才生效。默认情况下，轮询在屏幕不可见时，会暂停轮询。当设置成 <code>true</code> 时，在屏幕不可见时，轮询任务依旧会定时执行。</p></li>',3),un=(0,s._)("strong",null,"参考：",-1),dn=(0,s.Uk)(),hn=(0,s.Uk)("屏幕不可见时轮询"),gn=(0,s._)("h3",{id:"pollingwhenoffline",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#pollingwhenoffline","aria-hidden":"true"},"#"),(0,s.Uk)(" pollingWhenOffline")],-1),kn=(0,s.uE)('<li><p><strong>类型：</strong> <code>boolean</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p></li><li><p><strong>详情：</strong></p><p>当 <a href="#pollingInterval"><code>pollingInterval</code></a> 大于 <code>0</code> 时才生效。默认情况下，轮询在网络不可用时，会暂停轮询。当设置成 <code>true</code> 时，在网络不可用时，轮询任务依旧会定时执行。</p></li>',3),fn=(0,s._)("strong",null,"参考：",-1),_n=(0,s.Uk)(),mn=(0,s.Uk)("网络离线时轮询"),vn=(0,s._)("h3",{id:"debounceinterval",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#debounceinterval","aria-hidden":"true"},"#"),(0,s.Uk)(" debounceInterval")],-1),bn=(0,s.uE)('<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p></li><li><p><strong>详情：</strong></p><p>通过设置需要延迟的毫秒数，进入防抖模式。此时如果频繁触发 <a href="#run"><code>run</code></a> ，则会以防抖策略进行请求。</p></li>',3),Un=(0,s._)("strong",null,"参考：",-1),yn=(0,s.Uk)(),En=(0,s.Uk)("防抖"),wn=(0,s._)("h3",{id:"throttleinterval",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#throttleinterval","aria-hidden":"true"},"#"),(0,s.Uk)(" throttleInterval")],-1),Rn=(0,s.uE)('<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p></li><li><p><strong>详情：</strong></p><p>通过设置需要节流的毫秒数，进入节流模式。此时如果频繁触发 <a href="#run"><code>run</code></a> ，则会以节流策略进行请求。</p></li>',3),xn=(0,s._)("strong",null,"参考：",-1),Bn=(0,s.Uk)(),Pn=(0,s.Uk)("节流"),Wn=(0,s._)("h3",{id:"refreshonwindowfocus",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#refreshonwindowfocus","aria-hidden":"true"},"#"),(0,s.Uk)(" refreshOnWindowFocus")],-1),An=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"boolean")])],-1),qn=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"默认值："),(0,s.Uk)(),(0,s._)("code",null,"false")])],-1),Dn=(0,s._)("p",null,[(0,s._)("strong",null,"详情：")],-1),Fn=(0,s.Uk)("当设置为 "),In=(0,s._)("code",null,"true",-1),Sn=(0,s.Uk)(" 时，则在浏览器窗口触发 "),Cn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/focus",target:"_blank",rel:"noopener noreferrer"},On=(0,s.Uk)("focus"),Tn=(0,s.Uk)(" 和 "),jn={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/visibilitychange_event",target:"_blank",rel:"noopener noreferrer"},zn=(0,s.Uk)("visibilitychange"),Kn=(0,s.Uk)(" 时，会重新发起请求。"),Ln=(0,s._)("strong",null,"参考：",-1),Vn=(0,s.Uk)(),Nn=(0,s.Uk)("聚焦时重新请求"),Hn=(0,s._)("h3",{id:"refocustimespan",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#refocustimespan","aria-hidden":"true"},"#"),(0,s.Uk)(" refocusTimespan")],-1),Jn=(0,s.uE)('<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>5000</code></p></li><li><p><strong>详情：</strong></p><p>当 <a href="#refreshonwindowfocus">refreshOnWindowFocus</a> 设置为 <code>true</code> 时，你可以通过设置间隔的毫秒数，来限制 <a href="#refresh"><code>refresh</code></a> 的执行间隔，默认为 5000ms</p></li>',3),Qn=(0,s._)("strong",null,"参考：",-1),Mn=(0,s.Uk)(),Yn=(0,s.Uk)("重新聚焦间隔时间"),Gn=(0,s._)("h3",{id:"cachekey",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#cachekey","aria-hidden":"true"},"#"),(0,s.Uk)(" cacheKey")],-1),Xn=(0,s.uE)('<li><p><strong>类型：</strong> <code>string</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p></li><li><p><strong>详情：</strong></p><ul><li>我们会缓存每次请求的 <a href="#data"><code>data</code></a> , <a href="#error"><code>error</code></a> , <a href="#params"><code>params</code></a> , <a href="#loading"><code>loading</code></a></li><li>如果设置了 <code>cacheKey</code> ， VueRequest 会将当前请求数据缓存起来。当下次组件初始化时，如果有缓存数据，我们会优先返回缓存数据，然后在背后发送新请求，待新数据返回后，重新触发数据更新并更新缓存数据，也就是 <strong>SWR</strong> 的能力。</li><li>同一个 <code>cacheKey</code> 的请求，是全局共享的，也就是你可以提前加载数据。利用该特性，可以很方便的实现预加载。</li></ul></li>',3),Zn=(0,s._)("strong",null,"参考：",-1),$n=(0,s.Uk)(),na=(0,s.Uk)("缓存"),aa=(0,s._)("h3",{id:"cachetime",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#cachetime","aria-hidden":"true"},"#"),(0,s.Uk)(" cacheTime")],-1),ea=(0,s.uE)("<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>600000</code></p></li><li><p><strong>详情：</strong></p><p>当开启缓存后，你可以通过设置 <code>cacheTime</code> 来告诉我们缓存的过期时间。当缓存过期后，我们会将其删除。默认为 <strong>600000 毫秒</strong>，即 10 分钟</p></li>",3),sa=(0,s._)("strong",null,"参考：",-1),ta=(0,s.Uk)(),oa=(0,s.Uk)("缓存时间"),la=(0,s._)("h3",{id:"staletime",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#staletime","aria-hidden":"true"},"#"),(0,s.Uk)(" staleTime")],-1),ra=(0,s.uE)("<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p></li><li><p><strong>详情：</strong></p><p>如果你能确保缓存下来的数据，在一定时间内不会有任何更新的，我们建议你设置一个合理的毫秒数</p><ul><li>默认为 <code>0</code>，意味着不保鲜，每次都会重新发起请求</li><li>设置为 <code>-1</code> 则意味着缓存永不过期</li></ul></li>",3),pa=(0,s._)("strong",null,"参考：",-1),ca=(0,s.Uk)(),ia=(0,s.Uk)("保鲜时间"),ua=(0,s._)("h3",{id:"errorretrycount",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#errorretrycount","aria-hidden":"true"},"#"),(0,s.Uk)(" errorRetryCount")],-1),da=(0,s.uE)("<li><p><strong>类型：</strong> <code>number</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p></li><li><p><strong>详情：</strong></p><p>最大错误重试次数</p></li>",3),ha=(0,s._)("strong",null,"参考：",-1),ga=(0,s.Uk)(),ka=(0,s.Uk)("错误重试次数"),fa=(0,s._)("h3",{id:"errorretryinterval",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#errorretryinterval","aria-hidden":"true"},"#"),(0,s.Uk)(" errorRetryInterval")],-1),_a=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"number")])],-1),ma=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"默认值："),(0,s.Uk)(),(0,s._)("code",null,"0")])],-1),va=(0,s._)("p",null,[(0,s._)("strong",null,"详情：")],-1),ba=(0,s.Uk)("默认情况下，VueRequest 使用"),Ua={href:"https://en.wikipedia.org/wiki/Exponential_backoff",target:"_blank",rel:"noopener noreferrer"},ya=(0,s._)("strong",null,"二进制指数退避算法",-1),Ea=(0,s.Uk)(" 来帮你计算出合适的间隔时间，你也可以通过设置 "),wa=(0,s._)("code",null,"errorRetryInterval",-1),Ra=(0,s.Uk)(" 来覆盖默认行为"),xa=(0,s._)("strong",null,"参考：",-1),Ba=(0,s.Uk)(),Pa=(0,s.Uk)("错误重试间隔时间"),Wa=(0,s._)("h3",{id:"manual",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#manual","aria-hidden":"true"},"#"),(0,s.Uk)(" manual")],-1),Aa=(0,s.uE)('<li><p><strong>类型：</strong> <code>boolean</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p></li><li><p><strong>详情：</strong></p><p>当 <code>manual</code> 设置为 <code>true</code> 时，你需要手动触发 <a href="#run"><code>run</code></a> 才会发起请求</p></li>',3),qa=(0,s._)("strong",null,"参考：",-1),Da=(0,s.Uk)(),Fa=(0,s.Uk)("手动请求"),Ia=(0,s.uE)('<h3 id="defaultparams" tabindex="-1"><a class="header-anchor" href="#defaultparams" aria-hidden="true">#</a> defaultParams</h3><ul><li><p><strong>类型：</strong> <code>P[]</code></p></li><li><p><strong>默认值：</strong> <code>[]</code></p></li><li><p><strong>详情：</strong></p><p>如果 <a href="#manual"><code>manual</code></a> 设置为 <code>false</code> ，在自动执行 run 的时候，将会把 <code>defaultParams</code> 作为请求参数</p></li></ul><h3 id="ready" tabindex="-1"><a class="header-anchor" href="#ready" aria-hidden="true">#</a> ready</h3>',3),Sa=(0,s.uE)('<li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>true</code></p></li><li><p><strong>详情：</strong></p><p>只有当 <code>ready</code> 为 <code>true</code> 时，才会发起请求。</p><ul><li>该行为<strong>只会触发一次</strong>。如果想要多次触发，建议使用 <a href="#refreshdeps"><code>refreshDeps</code></a> 或者自己实现相关逻辑</li></ul></li>',3),Ca=(0,s._)("strong",null,"参考：",-1),Oa=(0,s.Uk)(),Ta=(0,s.Uk)("依赖请求"),ja=(0,s.uE)('<h3 id="initialdata" tabindex="-1"><a class="header-anchor" href="#initialdata" aria-hidden="true">#</a> initialData</h3><ul><li><p><strong>类型：</strong> <code>R</code></p></li><li><p><strong>默认值：</strong> <code>undefined</code></p></li><li><p><strong>详情：</strong></p><p>默认的 <a href="#data"><code>data</code></a></p></li></ul><h3 id="refreshdeps" tabindex="-1"><a class="header-anchor" href="#refreshdeps" aria-hidden="true">#</a> refreshDeps</h3>',3),za=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"类型："),(0,s.Uk)(),(0,s._)("code",null,"WatchSource<any>[]")])],-1),Ka=(0,s._)("li",null,[(0,s._)("p",null,[(0,s._)("strong",null,"默认值："),(0,s.Uk)(),(0,s._)("code",null,"[]")])],-1),La=(0,s._)("p",null,[(0,s._)("strong",null,"详情：")],-1),Va=(0,s._)("code",null,"refreshDeps",-1),Na=(0,s.Uk)(" 的变化，会触发 "),Ha=(0,s._)("code",null,"refresh",-1),Ja=(0,s.Uk)(" 的重新执行。其本质只是对 "),Qa={href:"https://v3.vuejs.org/guide/computed.html#watchers",target:"_blank",rel:"noopener noreferrer"},Ma=(0,s._)("code",null,"watch",-1),Ya=(0,s.Uk)(" 的封装"),Ga=(0,s.uE)('<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">watch</span><span class="token punctuation">(</span>refreshDeps<span class="token punctuation">,</span> refresh<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',1),Xa=(0,s._)("strong",null,"参考：",-1),Za=(0,s.Uk)(),$a=(0,s.Uk)("依赖刷新"),ne=(0,s._)("h3",{id:"querykey",tabindex:"-1"},[(0,s._)("a",{class:"header-anchor",href:"#querykey","aria-hidden":"true"},"#"),(0,s.Uk)(" queryKey")],-1),ae=(0,s.uE)('<li><p><strong>类型：</strong> <code>(...params: P[]) =&gt; string</code></p></li><li><p><strong>详情：</strong></p><p>根据 params，获取当前请求的 <strong>key</strong>，设置之后，我们会在 <a href="#queries"><code>queries</code></a> 中同时维护不同 <strong>key</strong> 值的请求状态。</p></li>',2),ee=(0,s._)("strong",null,"参考：",-1),se=(0,s.Uk)(),te=(0,s.Uk)("并发请求"),oe=(0,s.uE)('<h3 id="formatresult" tabindex="-1"><a class="header-anchor" href="#formatresult" aria-hidden="true">#</a> formatResult</h3><ul><li><p><strong>类型：</strong> <code>(data: R) =&gt; FR</code></p></li><li><p><strong>详情：</strong></p><p>格式化请求结果，入参为原本接口返回的 <code>data</code>，出参为处理过后的 <code>data</code></p><div class="language-tsx ext-tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> defineComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue-request&#39;</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>\n  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRequest</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&#39;api/timestramp&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">formatResult</span><span class="token operator">:</span> <span class="token parameter">data</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>data<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><h3 id="onsuccess" tabindex="-1"><a class="header-anchor" href="#onsuccess" aria-hidden="true">#</a> onSuccess</h3><ul><li><p><strong>类型：</strong> <code>(data: R, params: P[]) =&gt; void</code></p></li><li><p><strong>详情：</strong></p><p>当 <a href="#service">Service</a> <code>resolve</code> 时触发，参数为 <a href="#data"><code>data</code></a> 和 <a href="#params"><code>params</code></a></p><ul><li>如果有 <a href="#formatresult"><code>formatResult</code></a> ，则 <a href="#data"><code>data</code></a> 为格式化后数据。</li></ul></li></ul><h3 id="onerror" tabindex="-1"><a class="header-anchor" href="#onerror" aria-hidden="true">#</a> onError</h3><ul><li><p><strong>类型：</strong> <code>(error: Error, params: P[]) =&gt; void</code></p></li><li><p><strong>详情：</strong></p><p>当 <a href="#service">Service</a> <code>reject</code> 时触发，参数为 <a href="#error"><code>error</code></a> 和 <a href="#params"><code>params</code></a></p></li></ul><h3 id="onbefore" tabindex="-1"><a class="header-anchor" href="#onbefore" aria-hidden="true">#</a> onBefore</h3><ul><li><p><strong>Type:</strong> <code>(params: P[]) =&gt; void</code></p></li><li><p><strong>Details:</strong></p><p><a href="#service">Service</a> 请求前触发, 参数为 <a href="#params"><code>params</code></a>.</p></li></ul><h3 id="onafter" tabindex="-1"><a class="header-anchor" href="#onafter" aria-hidden="true">#</a> onAfter</h3><ul><li><p><strong>Type:</strong> <code>(params: P[]) =&gt; void</code></p></li><li><p><strong>Details:</strong></p><p><a href="#service">Service</a> 请求结束后触发, 参数为 <a href="#params"><code>params</code></a>.</p></li></ul>',10),le={render:function(n,a){const e=(0,s.up)("Badge"),le=(0,s.up)("OutboundLink"),re=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("h3",o,[l,r,(0,s.Wm)(e,{text:"New in 1.2.0"})]),p,(0,s._)("ul",null,[c,(0,s._)("li",null,[i,u,(0,s._)("div",d,[h,(0,s._)("p",null,[g,k,(0,s._)("a",f,[_,(0,s.Wm)(le)]),m])]),v]),(0,s._)("li",null,[(0,s._)("p",null,[b,(0,s.Wm)(re,{to:"/guide/documentation/queries.html"},{default:(0,s.w5)((()=>[U])),_:1})])])]),y,(0,s._)("ul",null,[E,(0,s._)("li",null,[(0,s._)("p",null,[w,(0,s.Wm)(re,{to:"/guide/documentation/mutation.html"},{default:(0,s.w5)((()=>[R])),_:1})])])]),x,(0,s._)("p",null,[B,(0,s.Wm)(re,{to:"/guide/documentation/dataFetching.html"},{default:(0,s.w5)((()=>[P])),_:1})]),W,(0,s._)("ul",null,[A,(0,s._)("li",null,[q,(0,s._)("p",null,[D,F,I,(0,s._)("a",S,[C,(0,s.Wm)(le)]),O,T])])]),j,(0,s._)("ul",null,[z,(0,s._)("li",null,[K,(0,s._)("p",null,[L,V,N,(0,s._)("a",H,[J,(0,s.Wm)(le)]),Q,M,Y,G])])]),X,Z,(0,s._)("ul",null,[$,(0,s._)("li",null,[(0,s._)("p",null,[nn,an,(0,s.Wm)(re,{to:"/guide/documentation/loadingDelay.html"},{default:(0,s.w5)((()=>[en])),_:1})])])]),sn,(0,s._)("ul",null,[tn,(0,s._)("li",null,[(0,s._)("p",null,[on,ln,(0,s.Wm)(re,{to:"/guide/documentation/polling.html"},{default:(0,s.w5)((()=>[rn])),_:1})])])]),pn,(0,s._)("ul",null,[cn,(0,s._)("li",null,[(0,s._)("p",null,[un,dn,(0,s.Wm)(re,{to:"/guide/documentation/polling.html#%E5%B1%8F%E5%B9%95%E4%B8%8D%E5%8F%AF%E8%A7%81%E6%97%B6%E8%BD%AE%E8%AF%A2"},{default:(0,s.w5)((()=>[hn])),_:1})])])]),gn,(0,s._)("ul",null,[kn,(0,s._)("li",null,[(0,s._)("p",null,[fn,_n,(0,s.Wm)(re,{to:"/guide/documentation/polling.html#%E7%BD%91%E7%BB%9C%E7%A6%BB%E7%BA%BF%E6%97%B6%E8%BD%AE%E8%AF%A2"},{default:(0,s.w5)((()=>[mn])),_:1})])])]),vn,(0,s._)("ul",null,[bn,(0,s._)("li",null,[(0,s._)("p",null,[Un,yn,(0,s.Wm)(re,{to:"/guide/documentation/debounce.html"},{default:(0,s.w5)((()=>[En])),_:1})])])]),wn,(0,s._)("ul",null,[Rn,(0,s._)("li",null,[(0,s._)("p",null,[xn,Bn,(0,s.Wm)(re,{to:"/guide/documentation/throttle.html"},{default:(0,s.w5)((()=>[Pn])),_:1})])])]),Wn,(0,s._)("ul",null,[An,qn,(0,s._)("li",null,[Dn,(0,s._)("p",null,[Fn,In,Sn,(0,s._)("a",Cn,[On,(0,s.Wm)(le)]),Tn,(0,s._)("a",jn,[zn,(0,s.Wm)(le)]),Kn])]),(0,s._)("li",null,[(0,s._)("p",null,[Ln,Vn,(0,s.Wm)(re,{to:"/guide/documentation/refreshOnWindowFocus.html"},{default:(0,s.w5)((()=>[Nn])),_:1})])])]),Hn,(0,s._)("ul",null,[Jn,(0,s._)("li",null,[(0,s._)("p",null,[Qn,Mn,(0,s.Wm)(re,{to:"/guide/documentation/refreshOnWindowFocus.html#%E9%87%8D%E6%96%B0%E8%81%9A%E7%84%A6%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4"},{default:(0,s.w5)((()=>[Yn])),_:1})])])]),Gn,(0,s._)("ul",null,[Xn,(0,s._)("li",null,[(0,s._)("p",null,[Zn,$n,(0,s.Wm)(re,{to:"/guide/documentation/cacheKey.html"},{default:(0,s.w5)((()=>[na])),_:1})])])]),aa,(0,s._)("ul",null,[ea,(0,s._)("li",null,[(0,s._)("p",null,[sa,ta,(0,s.Wm)(re,{to:"/guide/documentation/cacheKey.html#%E7%BC%93%E5%AD%98%E6%97%B6%E9%97%B4"},{default:(0,s.w5)((()=>[oa])),_:1})])])]),la,(0,s._)("ul",null,[ra,(0,s._)("li",null,[(0,s._)("p",null,[pa,ca,(0,s.Wm)(re,{to:"/guide/documentation/cacheKey.html#%E4%BF%9D%E9%B2%9C%E6%97%B6%E9%97%B4"},{default:(0,s.w5)((()=>[ia])),_:1})])])]),ua,(0,s._)("ul",null,[da,(0,s._)("li",null,[(0,s._)("p",null,[ha,ga,(0,s.Wm)(re,{to:"/guide/documentation/errorRetry.html#%E9%87%8D%E8%AF%95%E6%AC%A1%E6%95%B0"},{default:(0,s.w5)((()=>[ka])),_:1})])])]),fa,(0,s._)("ul",null,[_a,ma,(0,s._)("li",null,[va,(0,s._)("p",null,[ba,(0,s._)("a",Ua,[ya,(0,s.Wm)(le)]),Ea,wa,Ra])]),(0,s._)("li",null,[(0,s._)("p",null,[xa,Ba,(0,s.Wm)(re,{to:"/guide/documentation/errorRetry.html#%E9%87%8D%E8%AF%95%E9%97%B4%E9%9A%94%E6%97%B6%E9%97%B4"},{default:(0,s.w5)((()=>[Pa])),_:1})])])]),Wa,(0,s._)("ul",null,[Aa,(0,s._)("li",null,[(0,s._)("p",null,[qa,Da,(0,s.Wm)(re,{to:"/guide/documentation/manual.html"},{default:(0,s.w5)((()=>[Fa])),_:1})])])]),Ia,(0,s._)("ul",null,[Sa,(0,s._)("li",null,[(0,s._)("p",null,[Ca,Oa,(0,s.Wm)(re,{to:"/guide/documentation/ready.html"},{default:(0,s.w5)((()=>[Ta])),_:1})])])]),ja,(0,s._)("ul",null,[za,Ka,(0,s._)("li",null,[La,(0,s._)("p",null,[Va,Na,Ha,Ja,(0,s._)("a",Qa,[Ma,(0,s.Wm)(le)]),Ya]),Ga]),(0,s._)("li",null,[(0,s._)("p",null,[Xa,Za,(0,s.Wm)(re,{to:"/guide/documentation/refreshDeps.html"},{default:(0,s.w5)((()=>[$a])),_:1})])])]),ne,(0,s._)("ul",null,[ae,(0,s._)("li",null,[(0,s._)("p",null,[ee,se,(0,s.Wm)(re,{to:"/guide/documentation/queries.html"},{default:(0,s.w5)((()=>[te])),_:1})])])]),oe],64)}}},63535:(n,a,e)=>{e.r(a),e.d(a,{data:()=>s});const s={key:"v-744497ce",path:"/api/",title:"公共 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Return Values",slug:"return-values",children:[{level:3,title:"data",slug:"data",children:[]},{level:3,title:"loading",slug:"loading",children:[]},{level:3,title:"reloading",slug:"reloading",children:[]},{level:3,title:"params",slug:"params",children:[]},{level:3,title:"error",slug:"error",children:[]},{level:3,title:"queries",slug:"queries",children:[]},{level:3,title:"run",slug:"run",children:[]},{level:3,title:"cancel",slug:"cancel",children:[]},{level:3,title:"refresh",slug:"refresh",children:[]},{level:3,title:"reload",slug:"reload",children:[]},{level:3,title:"mutate",slug:"mutate",children:[]}]},{level:2,title:"Service",slug:"service",children:[{level:3,title:"请求函数",slug:"请求函数",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"对象",slug:"对象",children:[]}]},{level:2,title:"Options",slug:"options",children:[{level:3,title:"loadingDelay",slug:"loadingdelay",children:[]},{level:3,title:"pollingInterval",slug:"pollinginterval",children:[]},{level:3,title:"pollingWhenHidden",slug:"pollingwhenhidden",children:[]},{level:3,title:"pollingWhenOffline",slug:"pollingwhenoffline",children:[]},{level:3,title:"debounceInterval",slug:"debounceinterval",children:[]},{level:3,title:"throttleInterval",slug:"throttleinterval",children:[]},{level:3,title:"refreshOnWindowFocus",slug:"refreshonwindowfocus",children:[]},{level:3,title:"refocusTimespan",slug:"refocustimespan",children:[]},{level:3,title:"cacheKey",slug:"cachekey",children:[]},{level:3,title:"cacheTime",slug:"cachetime",children:[]},{level:3,title:"staleTime",slug:"staletime",children:[]},{level:3,title:"errorRetryCount",slug:"errorretrycount",children:[]},{level:3,title:"errorRetryInterval",slug:"errorretryinterval",children:[]},{level:3,title:"manual",slug:"manual",children:[]},{level:3,title:"defaultParams",slug:"defaultparams",children:[]},{level:3,title:"ready",slug:"ready",children:[]},{level:3,title:"initialData",slug:"initialdata",children:[]},{level:3,title:"refreshDeps",slug:"refreshdeps",children:[]},{level:3,title:"queryKey",slug:"querykey",children:[]},{level:3,title:"formatResult",slug:"formatresult",children:[]},{level:3,title:"onSuccess",slug:"onsuccess",children:[]},{level:3,title:"onError",slug:"onerror",children:[]},{level:3,title:"onBefore",slug:"onbefore",children:[]},{level:3,title:"onAfter",slug:"onafter",children:[]}]}],filePathRelative:"api/index.md",git:{updatedTime:1631070702e3,contributors:[{name:"John",email:"John60676@qq.com",commits:1}]}}}}]);