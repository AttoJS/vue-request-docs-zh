(self.webpackChunkzh=self.webpackChunkzh||[]).push([[592],{9904:(e,a,n)=>{"use strict";n.r(a),n.d(a,{default:()=>he});var t=n(7875);const l=(0,t.uE)('<h1 id="分页扩展-api"><a class="header-anchor" href="#分页扩展-api">#</a> 分页扩展 API</h1><p>分页扩展。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>ReturnValues <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">usePagination</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">FR</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> Options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',3),s=(0,t.Wm)("strong",null,"用法参考:",-1),o=(0,t.Uk)(),r=(0,t.Uk)("分页扩展"),c={class:"custom-container warning"},p=(0,t.Wm)("p",{class:"custom-container-title"},"注意",-1),u=(0,t.Uk)("以下API，是 "),i=(0,t.Uk)("公共API"),d=(0,t.Uk)(" 的"),g=(0,t.Wm)("strong",null,"超集",-1),h=(0,t.Uk)("。如果没有特别说明的，则和 "),m=(0,t.Uk)("公共API"),W=(0,t.Uk)(" 保持一致。"),k=(0,t.uE)('<h2 id="return-values"><a class="header-anchor" href="#return-values">#</a> Return Values</h2><h3 id="current"><a class="header-anchor" href="#current">#</a> current</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;number&gt;</code></p></li><li><p><strong>默认值：</strong> <code>1</code></p><p>当前页数。我们在内部监听了该值，当你直接修改 <code>current</code> 的时，会自动触发 <a href="#changecurrent"><code>changeCurrent</code></a> 方法。因此你可以配合 <code>v-model</code> 使用。</p></li></ul><h3 id="pagesize"><a class="header-anchor" href="#pagesize">#</a> pageSize</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;number&gt;</code></p></li><li><p><strong>默认值：</strong> <code>10</code></p><p>每页获取的条数。我们在内部监听了该值，当你直接修改 <code>pageSize</code> 的时，会自动触发 <a href="#changepagesize"><code>changePageSize</code></a> 方法。因此你可以配合 <code>v-model</code> 使用。</p></li></ul><h3 id="total"><a class="header-anchor" href="#total">#</a> total</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;number&gt;</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p><p>数据总数。</p></li></ul><h3 id="totalpage"><a class="header-anchor" href="#totalpage">#</a> totalPage</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;number&gt;</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p><p>总页数，必须提供正确的 <a href="#total"><code>total</code></a> 和 <a href="#pagesize"><code>pageSize</code></a>，否则可能得到不正确的值。</p></li></ul><h3 id="changecurrent"><a class="header-anchor" href="#changecurrent">#</a> changeCurrent</h3><ul><li><p><strong>类型：</strong> <code>(current: number) =&gt; void</code></p><p>修改当前页数</p></li></ul><h3 id="changepagesize"><a class="header-anchor" href="#changepagesize">#</a> changePageSize</h3><ul><li><p><strong>类型：</strong> <code>(pageSize: number) =&gt; void</code></p><p>修改每页获取的条数</p></li></ul>',13),f={id:"changepagination"},U=(0,t.Wm)("a",{class:"header-anchor",href:"#changepagination"},"#",-1),v=(0,t.Uk)(" changePagination "),y=(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"类型："),(0,t.Uk)(),(0,t.Wm)("code",null,"(current: number, pageSize: number) => void")]),(0,t.Wm)("p",null,"同时修改页数和条数")])],-1),z=(0,t.Wm)("h3",{id:"reload"},[(0,t.Wm)("a",{class:"header-anchor",href:"#reload"},"#"),(0,t.Uk)(" reload")],-1),P=(0,t.Wm)("p",null,[(0,t.Wm)("strong",null,"类型："),(0,t.Uk)(),(0,t.Wm)("code",null,"() => void")],-1),b=(0,t.Uk)("清空所有请求状态，以及请求结果（包括"),w=(0,t.Wm)("code",null,"data",-1),S=(0,t.Uk)("），并使用 "),q=(0,t.Wm)("code",null,"defaultParams",-1),K=(0,t.Uk)(" 重新触发 "),R=(0,t.Wm)("code",null,"run()",-1),_={id:"queries"},x=(0,t.Wm)("a",{class:"header-anchor",href:"#queries"},"#",-1),C=(0,t.Uk)(" queries "),A=(0,t.Uk)("分页模式下，不支持 "),I=(0,t.Uk)("并发请求"),O=(0,t.uE)('<h2 id="options"><a class="header-anchor" href="#options">#</a> Options</h2><h3 id="pagination"><a class="header-anchor" href="#pagination">#</a> pagination</h3><ul><li><p><strong>类型：</strong></p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token punctuation">{</span>\n  currentKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  pageSizeKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  totalKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  totalPageKey<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p><strong>详情：</strong></p></li></ul>',3),E={class:"custom-container tip"},V=(0,t.Wm)("p",{class:"custom-container-title"},"提示",-1),L=(0,t.Wm)("code",null,"totalKey",-1),N=(0,t.Uk)(" 和 "),j=(0,t.Wm)("code",null,"totalPageKey",-1),B=(0,t.Uk)(" 均使用 "),F=(0,t.Wm)("code",null,"lodash.get",-1),H=(0,t.Uk)(" 来实现的，因此支持传入对象属性的路径来获取值，详情可以参考 "),T={href:"https://lodash.com/docs/4.17.15#get",target:"_blank",rel:"noopener noreferrer"},Y=(0,t.Uk)("lodash文档"),D=(0,t.Wm)("thead",null,[(0,t.Wm)("tr",null,[(0,t.Wm)("th",null,"pagination 字段"),(0,t.Wm)("th",null,"说明"),(0,t.Wm)("th",null,"默认值")])],-1),G=(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"currentKey"),(0,t.Wm)("td",null,[(0,t.Uk)("你可以通过该值指定接口 "),(0,t.Wm)("strong",null,"当前页数"),(0,t.Uk)(" 参数的属性值")]),(0,t.Wm)("td",null,[(0,t.Wm)("code",null,"'current'")])],-1),J=(0,t.Wm)("tr",null,[(0,t.Wm)("td",null,"pageSizeKey"),(0,t.Wm)("td",null,[(0,t.Uk)("你可以通过该值指定接口 "),(0,t.Wm)("strong",null,"每页获取条数"),(0,t.Uk)(" 参数的属性值")]),(0,t.Wm)("td",null,[(0,t.Wm)("code",null,"'pageSize'")])],-1),M=(0,t.Wm)("td",null,"totalKey",-1),Q=(0,t.Uk)("指定 "),X=(0,t.Wm)("code",null,"data",-1),Z=(0,t.Uk)(" 中 "),$=(0,t.Wm)("a",{href:"#total"},[(0,t.Wm)("code",null,"total")],-1),ee=(0,t.Uk)(" 属性的路径"),ae=(0,t.Wm)("td",null,[(0,t.Wm)("code",null,"'total'")],-1),ne=(0,t.Wm)("td",null,"totalPageKey",-1),te=(0,t.Uk)("指定 "),le=(0,t.Wm)("code",null,"data",-1),se=(0,t.Uk)(" 中 "),oe=(0,t.Wm)("a",{href:"#totalpage"},[(0,t.Wm)("code",null,"totalPage")],-1),re=(0,t.Uk)(" 属性的路径"),ce=(0,t.Wm)("td",null,[(0,t.Wm)("code",null,"'totalPage'")],-1),pe={id:"querykey"},ue=(0,t.Wm)("a",{class:"header-anchor",href:"#querykey"},"#",-1),ie=(0,t.Uk)(" queryKey "),de=(0,t.Uk)("分页模式下，不支持 "),ge=(0,t.Uk)("并发请求"),he={render:function(e,a){const n=(0,t.up)("RouterLink"),he=(0,t.up)("Badge"),me=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[l,(0,t.Wm)("p",null,[s,o,(0,t.Wm)(n,{to:"/guide/documentation/advancedUsage.html#pagination"},{default:(0,t.w5)((()=>[r])),_:1})]),(0,t.Wm)("div",c,[p,(0,t.Wm)("p",null,[u,(0,t.Wm)(n,{to:"/api/"},{default:(0,t.w5)((()=>[i])),_:1}),d,g,h,(0,t.Wm)(n,{to:"/api/"},{default:(0,t.w5)((()=>[m])),_:1}),W])]),k,(0,t.Wm)("h3",f,[U,v,(0,t.Wm)(he,{text:"New in 1.2.0"})]),y,z,(0,t.Wm)("ul",null,[(0,t.Wm)("li",null,[P,(0,t.Wm)("p",null,[b,(0,t.Wm)(n,{to:"/api/#data"},{default:(0,t.w5)((()=>[w])),_:1}),S,(0,t.Wm)(n,{to:"/api/#defaultparams"},{default:(0,t.w5)((()=>[q])),_:1}),K,(0,t.Wm)(n,{to:"/api/#run"},{default:(0,t.w5)((()=>[R])),_:1})])])]),(0,t.Wm)("h3",_,[x,C,(0,t.Wm)(he,{text:"不支持",type:"danger"})]),(0,t.Wm)("p",null,[A,(0,t.Wm)(n,{to:"/guide/documentation/queries.html"},{default:(0,t.w5)((()=>[I])),_:1})]),O,(0,t.Wm)("div",E,[V,(0,t.Wm)("p",null,[L,N,j,B,F,H,(0,t.Wm)("a",T,[Y,(0,t.Wm)(me)])])]),(0,t.Wm)("table",null,[D,(0,t.Wm)("tbody",null,[G,J,(0,t.Wm)("tr",null,[M,(0,t.Wm)("td",null,[Q,(0,t.Wm)(n,{to:"/api/#data"},{default:(0,t.w5)((()=>[X])),_:1}),Z,$,ee]),ae]),(0,t.Wm)("tr",null,[ne,(0,t.Wm)("td",null,[te,(0,t.Wm)(n,{to:"/api/#data"},{default:(0,t.w5)((()=>[le])),_:1}),se,oe,re]),ce])])]),(0,t.Wm)("h3",pe,[ue,ie,(0,t.Wm)(he,{text:"不支持",type:"danger"})]),(0,t.Wm)("p",null,[de,(0,t.Wm)(n,{to:"/guide/documentation/queries.html"},{default:(0,t.w5)((()=>[ge])),_:1})])],64)}}},3640:(e,a,n)=>{"use strict";n.r(a),n.d(a,{data:()=>t});const t={key:"v-e260681e",path:"/api/pagination.html",title:"分页扩展 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Return Values",slug:"return-values",children:[{level:3,title:"current",slug:"current",children:[]},{level:3,title:"pageSize",slug:"pagesize",children:[]},{level:3,title:"total",slug:"total",children:[]},{level:3,title:"totalPage",slug:"totalpage",children:[]},{level:3,title:"changeCurrent",slug:"changecurrent",children:[]},{level:3,title:"changePageSize",slug:"changepagesize",children:[]},{level:3,title:"changePagination",slug:"changepagination",children:[]},{level:3,title:"reload",slug:"reload",children:[]},{level:3,title:"queries",slug:"queries",children:[]}]},{level:2,title:"Options",slug:"options",children:[{level:3,title:"pagination",slug:"pagination",children:[]},{level:3,title:"queryKey",slug:"querykey",children:[]}]}],filePathRelative:"api/pagination.md",git:{updatedTime:1622685008e3,contributors:[]}}}}]);