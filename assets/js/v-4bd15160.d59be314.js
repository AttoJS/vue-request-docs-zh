"use strict";(self.webpackChunkzh=self.webpackChunkzh||[]).push([[114],{85802:(e,a,n)=>{n.r(a),n.d(a,{default:()=>ye});var t=n(27875);const l=(0,t.uE)('<h1 id="加载更多扩展-api" tabindex="-1"><a class="header-anchor" href="#加载更多扩展-api" aria-hidden="true">#</a> 加载更多扩展 API</h1><p>加载更多扩展。</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token operator">...</span>ReturnValues <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useLoadMore</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">R</span><span class="token punctuation">,</span> <span class="token constant">P</span><span class="token punctuation">,</span> <span class="token constant">FR</span><span class="token punctuation">,</span> <span class="token constant">LR</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>Service<span class="token punctuation">,</span> Options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TS 泛型说明</p><p><code>LR</code> 是 <a href="#datalist"><code>dataList</code></a> 的类型 <em>（注：该泛型受到 <code>unknown[]</code> 的约束）</em></p></div>',4),s=(0,t._)("strong",null,"用法参考:",-1),o=(0,t.Uk)(),r=(0,t.Uk)("加载更多扩展"),i={class:"custom-container warning"},d=(0,t._)("p",{class:"custom-container-title"},"注意",-1),c=(0,t.Uk)("以下API，是 "),u=(0,t.Uk)("公共API"),p=(0,t.Uk)(" 的"),h=(0,t._)("strong",null,"超集",-1),g=(0,t.Uk)("。如果没有特别说明的，则和 "),k=(0,t.Uk)("公共API"),_=(0,t.Uk)(" 保持一致。"),m=(0,t.uE)('<h2 id="return-values" tabindex="-1"><a class="header-anchor" href="#return-values" aria-hidden="true">#</a> Return Values</h2><h3 id="datalist" tabindex="-1"><a class="header-anchor" href="#datalist" aria-hidden="true">#</a> dataList</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;LR&gt;</code></p></li><li><p><strong>默认值：</strong> <code>[]</code></p><p>所有请求数据（数据取自 <strong>data[<a href="#listkey">listkey</a>]</strong>）的合并数组</p></li></ul><h3 id="loadingmore" tabindex="-1"><a class="header-anchor" href="#loadingmore" aria-hidden="true">#</a> loadingMore</h3>',4),f=(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"类型："),(0,t.Uk)(),(0,t._)("code",null,"Ref<boolean>")])],-1),v=(0,t._)("p",null,[(0,t._)("strong",null,"默认值："),(0,t.Uk)(),(0,t._)("code",null,"false")],-1),U=(0,t.Uk)("是否正在加载更多，用于记录 "),y=(0,t._)("a",{href:"#loadmore"},[(0,t._)("code",null,"loadMore()")],-1),x=(0,t.Uk)(" 是否正在触发。如果想要判断 "),b=(0,t._)("code",null,"Service",-1),R=(0,t.Uk)(" 是否正在请求，请使用 "),M=(0,t._)("code",null,"loading",-1),w={id:"refreshing",tabindex:"-1"},W=(0,t._)("a",{class:"header-anchor",href:"#refreshing","aria-hidden":"true"},"#",-1),L=(0,t.Uk)(" refreshing "),q=(0,t.uE)('<ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p>是否正在刷新，用于记录 <a href="#refresh"><code>refresh()</code></a> 是否正在触发。</p></li></ul><h3 id="nomore" tabindex="-1"><a class="header-anchor" href="#nomore" aria-hidden="true">#</a> noMore</h3><ul><li><p><strong>类型：</strong> <code>Ref&lt;boolean&gt;</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p><p>是否有更多数据，需要配合 <a href="#isnomore"><code>isNoMore</code></a> 使用</p></li></ul><h3 id="loadmore" tabindex="-1"><a class="header-anchor" href="#loadmore" aria-hidden="true">#</a> loadMore</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p></li><li><p><strong>默认值：</strong> <code>0</code></p><p>触发加载更多</p></li></ul><h3 id="reload" tabindex="-1"><a class="header-anchor" href="#reload" aria-hidden="true">#</a> reload</h3><ul><li><p><strong>类型：</strong> <code>() =&gt; void</code></p><p>清空所有请求状态，以及请求结果（包括<a href="#datalist"><code>dataList</code></a>），并重新触发请求</p></li></ul>',7),P={id:"refresh",tabindex:"-1"},D=(0,t._)("a",{class:"header-anchor",href:"#refresh","aria-hidden":"true"},"#",-1),N=(0,t.Uk)(" refresh "),T=(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"类型："),(0,t.Uk)(),(0,t._)("code",null,"() => void")]),(0,t._)("p",null,[(0,t.Uk)("重新请求数据，与"),(0,t._)("a",{href:"#reload"},[(0,t._)("code",null,"reload()")]),(0,t.Uk)(" 不同的是，该方法在请求结束前不会清空"),(0,t._)("a",{href:"#datalist"},[(0,t._)("code",null,"dataList")]),(0,t.Uk)("，可用于实现下拉刷新")])])],-1),A={id:"queries",tabindex:"-1"},E=(0,t._)("a",{class:"header-anchor",href:"#queries","aria-hidden":"true"},"#",-1),I=(0,t.Uk)(" queries "),K=(0,t.Uk)("LoadMore 模式下，不支持 "),S=(0,t.Uk)("并发请求"),O={id:"mutate",tabindex:"-1"},z=(0,t._)("a",{class:"header-anchor",href:"#mutate","aria-hidden":"true"},"#",-1),C=(0,t.Uk)(" mutate "),V=(0,t.Uk)("LoadMore 模式下，不支持 "),J=(0,t.Uk)("数据更改"),B=(0,t.uE)('<h2 id="service" tabindex="-1"><a class="header-anchor" href="#service" aria-hidden="true">#</a> Service</h2><h3 id="请求函数" tabindex="-1"><a class="header-anchor" href="#请求函数" aria-hidden="true">#</a> 请求函数</h3><ul><li><p><strong>类型：</strong></p><ul><li><code>(returnData: ReturnDataType | undefined, ...params: P) =&gt; Promise&lt;R&gt;</code></li><li><code>| (returnData: ReturnDataType | undefined, ...params: P) =&gt; string</code></li><li><code>| (returnData: ReturnDataType | undefined, ...params: P) =&gt; ({ url: string; [key: string]: any; })</code></li></ul></li><li><p><strong>详情：</strong></p><p>第一个参数的类型解释如下（首次请求时，第一个参数是<code>undefined</code>）</p><div class="language-typescript ext-ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">ReturnDataType</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  data<span class="token operator">:</span> <span class="token constant">R</span><span class="token punctuation">;</span> <span class="token comment">// 上一次请求的结果</span>\n  dataList<span class="token operator">:</span> <span class="token constant">LR</span><span class="token punctuation">;</span> <span class="token comment">// 当前存储的结果合并数组</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul>',3),F={id:"字符串",tabindex:"-1"},H=(0,t._)("a",{class:"header-anchor",href:"#字符串","aria-hidden":"true"},"#",-1),Y=(0,t.Uk)(" 字符串 "),j=(0,t._)("p",null,"loadMore 模式下，不支持。",-1),G={id:"对象",tabindex:"-1"},Q=(0,t._)("a",{class:"header-anchor",href:"#对象","aria-hidden":"true"},"#",-1),X=(0,t.Uk)(" 对象 "),Z=(0,t._)("p",null,"loadMore 模式下，不支持。",-1),$=(0,t._)("h2",{id:"options",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#options","aria-hidden":"true"},"#"),(0,t.Uk)(" Options")],-1),ee=(0,t._)("h3",{id:"listkey",tabindex:"-1"},[(0,t._)("a",{class:"header-anchor",href:"#listkey","aria-hidden":"true"},"#"),(0,t.Uk)(" listKey")],-1),ae=(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"类型："),(0,t.Uk)(),(0,t._)("code",null,"string")])],-1),ne=(0,t._)("li",null,[(0,t._)("p",null,[(0,t._)("strong",null,"默认值："),(0,t.Uk)(),(0,t._)("code",null,"list")])],-1),te=(0,t._)("p",null,[(0,t._)("strong",null,"详情：")],-1),le={class:"custom-container tip"},se=(0,t._)("p",{class:"custom-container-title"},"提示",-1),oe=(0,t._)("code",null,"listKey",-1),re=(0,t.Uk)(" 使用 "),ie=(0,t._)("code",null,"lodash.get",-1),de=(0,t.Uk)(" 来实现的，因此支持传入对象属性的路径来获取值，详情可以参考 "),ce={href:"https://lodash.com/docs/4.17.15#get",target:"_blank",rel:"noopener noreferrer"},ue=(0,t.Uk)("lodash文档"),pe=(0,t.Uk)("指定 "),he=(0,t._)("code",null,"data",-1),ge=(0,t.Uk)(" 中数据数组的路径"),ke=(0,t.uE)('<h3 id="isnomore" tabindex="-1"><a class="header-anchor" href="#isnomore" aria-hidden="true">#</a> isNoMore</h3><ul><li><p><strong>类型：</strong> <code>(data: R) =&gt; boolean</code></p></li><li><p><strong>默认值：</strong> <code>false</code></p></li><li><p><strong>详情：</strong></p><p>判断是否还有更多数据</p></li></ul>',2),_e={id:"querykey",tabindex:"-1"},me=(0,t._)("a",{class:"header-anchor",href:"#querykey","aria-hidden":"true"},"#",-1),fe=(0,t.Uk)(" queryKey "),ve=(0,t.Uk)("LoadMore 模式下，不支持 "),Ue=(0,t.Uk)("并发请求"),ye={render:function(e,a){const n=(0,t.up)("RouterLink"),ye=(0,t.up)("Badge"),xe=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[l,(0,t._)("p",null,[s,o,(0,t.Wm)(n,{to:"/guide/documentation/loadMore.html"},{default:(0,t.w5)((()=>[r])),_:1})]),(0,t._)("div",i,[d,(0,t._)("p",null,[c,(0,t.Wm)(n,{to:"/api/"},{default:(0,t.w5)((()=>[u])),_:1}),p,h,g,(0,t.Wm)(n,{to:"/api/"},{default:(0,t.w5)((()=>[k])),_:1}),_])]),m,(0,t._)("ul",null,[f,(0,t._)("li",null,[v,(0,t._)("p",null,[U,y,x,(0,t.Wm)(n,{to:"/api/index.html#service"},{default:(0,t.w5)((()=>[b])),_:1}),R,(0,t.Wm)(n,{to:"/api/index.html#loading"},{default:(0,t.w5)((()=>[M])),_:1})])])]),(0,t._)("h3",w,[W,L,(0,t.Wm)(ye,{text:"New in 1.1.0"})]),q,(0,t._)("h3",P,[D,N,(0,t.Wm)(ye,{text:"New in 1.1.0"})]),T,(0,t._)("h3",A,[E,I,(0,t.Wm)(ye,{text:"不支持",type:"danger"})]),(0,t._)("p",null,[K,(0,t.Wm)(n,{to:"/guide/documentation/queries.html"},{default:(0,t.w5)((()=>[S])),_:1})]),(0,t._)("h3",O,[z,C,(0,t.Wm)(ye,{text:"不支持",type:"danger"})]),(0,t._)("p",null,[V,(0,t.Wm)(n,{to:"/guide/documentation/mutation.html"},{default:(0,t.w5)((()=>[J])),_:1})]),B,(0,t._)("h3",F,[H,Y,(0,t.Wm)(ye,{text:"不支持",type:"danger"})]),j,(0,t._)("h3",G,[Q,X,(0,t.Wm)(ye,{text:"不支持",type:"danger"})]),Z,$,ee,(0,t._)("ul",null,[ae,ne,(0,t._)("li",null,[te,(0,t._)("div",le,[se,(0,t._)("p",null,[oe,re,ie,de,(0,t._)("a",ce,[ue,(0,t.Wm)(xe)])])])])]),(0,t._)("p",null,[pe,(0,t.Wm)(n,{to:"/api/#data"},{default:(0,t.w5)((()=>[he])),_:1}),ge]),ke,(0,t._)("h3",_e,[me,fe,(0,t.Wm)(ye,{text:"不支持",type:"danger"})]),(0,t._)("p",null,[ve,(0,t.Wm)(n,{to:"/guide/documentation/queries.html"},{default:(0,t.w5)((()=>[Ue])),_:1})])],64)}}},64488:(e,a,n)=>{n.r(a),n.d(a,{data:()=>t});const t={key:"v-4bd15160",path:"/api/loadMore.html",title:"加载更多扩展 API",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"Return Values",slug:"return-values",children:[{level:3,title:"dataList",slug:"datalist",children:[]},{level:3,title:"loadingMore",slug:"loadingmore",children:[]},{level:3,title:"refreshing",slug:"refreshing",children:[]},{level:3,title:"noMore",slug:"nomore",children:[]},{level:3,title:"loadMore",slug:"loadmore",children:[]},{level:3,title:"reload",slug:"reload",children:[]},{level:3,title:"refresh",slug:"refresh",children:[]},{level:3,title:"queries",slug:"queries",children:[]},{level:3,title:"mutate",slug:"mutate",children:[]}]},{level:2,title:"Service",slug:"service",children:[{level:3,title:"请求函数",slug:"请求函数",children:[]},{level:3,title:"字符串",slug:"字符串",children:[]},{level:3,title:"对象",slug:"对象",children:[]}]},{level:2,title:"Options",slug:"options",children:[{level:3,title:"listKey",slug:"listkey",children:[]},{level:3,title:"isNoMore",slug:"isnomore",children:[]},{level:3,title:"queryKey",slug:"querykey",children:[]}]}],filePathRelative:"api/loadMore.md",git:{updatedTime:1631070702e3,contributors:[{name:"John",email:"John60676@qq.com",commits:1}]}}}}]);